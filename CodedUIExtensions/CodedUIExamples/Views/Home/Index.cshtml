@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>Coded UI Examples</h1>
    <p class="lead">Free resources for building automation based on Microsoft's <a href="https://msdn.microsoft.com/en-us/library/dd286726.aspx">CodedUI Framework.</a></p>
    <p><a href="https://msdn.microsoft.com/en-us/library/jj620891.aspx" class="btn btn-primary btn-lg">Learn more &raquo;</a></p>
</div>

<div class="row">
    <div class="col-md-6">
        <h2>Getting started</h2>
        <p>
            There are three parts to the Coded UI Extension library.
            <ol>
                <li>
                    @Html.ActionLink("Coded UI Fluent", "Fluent")
                    <ul>
                        <li>
                            Additional HTML controls to provide clean, consistent search expressions.
                        </li>
                        <li>
                            Fluent extensions to reduce the amount of code required to find UI Test Controls while also improving the readability of the search expression.
                        </li>
                        <li>
                            Extends the existing Coded UI type hierarchy to be fully compatible with exisitng tests using Coded UI.
                        </li>
                    </ul>
                </li>
                <li>
                    @Html.ActionLink("Page Modeling Abstraction", "PageModeling")
                    <ul>
                        <li>Platform agnostic set of abstractions over UI capabilities.</li>
                        <li>
                            Express UI in terms of simple interfaces likes:
                            <ul>
                                <li>IClickable</li>
                                <li>ISelectable</li>
                                <li>IValuable</li>
                                <li>...</li>
                            </ul>
                        </li>
                    </ul>
                </li>
                <li>
                    @Html.ActionLink("Coded UI Implementation of the Page Modeling Abstraction", "CodedUIPageModeling")
                    <ul>
                        <li>Let the framework provide consistent semantics for testing your UI</li>
                        <li>Separate modeling pages of your application from the tests against them</li>
                    </ul>
                </li>
            </ol>
        </p>
        <p><a class="btn btn-default" href="https://www.nuget.org/packages/CodedUIPageModeling/">Find on Nuget &raquo;</a></p>
    </div>
    <div class="col-md-6">
        <h2>Examples</h2>
        <p>Examples and comparison of standard Coded UI scripts and using the extension libraries.</p>
        <p>
            These examples work with the source code and act as the actual tests to validate the framework functionality.
            You can <a href="https://github.com/spelltwister/CodedUIFluentExtensions">download the source code from github</a> and run the tests to see exactly how the code works.
            <ol>
                <li>
                    <a href="@Url.Action("Example1", "Examples")">Simple Html Input Controls</a><br/>
                    Examples of manipulating various html input controls.
                </li>
                <li>
                    <a href="@Url.Action("Example2", "Examples")">Static Child (Nested Controls)</a><br/>
                    Examples of how to use the Static Child base class for distinguishing nested controls on a page.
                </li>
            </ol>
            Here is a set of refactorings to understand why Page Objects and Page Models can help your test code.
            <ol>
                <li>
                    <a href="@Url.Action("InitialRequirements", "DecomposingPageObjects")">Initial Requirements</a>
                    Initial sample app tests with no strategy for how to perform testing.
                </li>
                <li>
                    <a href="@Url.Action("Change1", "DecomposingPageObjects")">Hide Confirm Password</a>
                    First requirement change to hide the confirm password input until both username and password have been set.
                </li>
                <li>
                    <a href="@Url.Action("Change2", "DecomposingPageObjects")">Hide Register Button</a>
                    Second requirement change to hide the register button until both username and password have been set.
                </li>
                <li>
                    <a href="@Url.Action("Change3", "DecomposingPageObjects")">Add Orders Page</a>
                    Add an Orders page where logged in users can place orders.
                </li>
                <li>
                    <a href="@Url.Action("Change4", "DecomposingPageObjects")">Add and Cancel Buttons</a>
                    First change to Orders page to not show new order fields until the Add button is clicked. Also,
                    include a cancel button which will hide the new order fields.
                </li>
                <li>
                    <a href="@Url.Action("Change5", "DecomposingPageObjects")">Quantity and Delete</a>
                    Second change to the Orders page to add a quantity field which only shows when an Order ID has been set.
                    Also, add a delete button to the orders table for each order.
                </li>
                <li>
                    <a href="@Url.Action("Change6", "DecomposingPageObjects")">Account Required</a>
                    Require that the user has first and last name before entering orders.
                </li>
            </ol>
        </p>
        <p><a class="btn btn-default" href="https://github.com/spelltwister/CodedUIFluentExtensions">Find on Github &raquo;</a></p>
    </div>
</div>